{$DEFINE SMART}
{$loadlib libsmartremote}

end;

procedure TSmart.Create(Width, Height: Integer; Plugins: TStringArray = []); overload;
begin
  Self.Create(Width, Height, 's', Plugins);
end;


  function GetDirectoryName(Directory, Path: String): String;
  var
    I: Integer;
    Directories: TStringArray;
  begin
    Directories := GetDirectories(Path);


  function FindDirectory(Directory, Path: String): Boolean;
  begin
    Result := Length(GetDirectoryName(Directory, Path)) > 0;
  end;

var
begin
  begin
    CurrentPath := Drive + 'Program Files (x86)\';
  end else
    CurrentPath := Drive + 'Program Files\';

  if (FindDirectory('Java|java', CurrentPath + '\')) then
  begin
    begin
    end;
    begin
    end;
  end;
end;

begin
end;

var
      begin
      end;
end;

begin
end;

begin
  begin
  end;
end;

  begin
  end;
end;

begin
end;

begin
    begin
    end;
end;

procedure TSmart.GetMousePos(var X, Y: Integer);
begin
  SmartGetMousePos(Self.Target, X, Y);
end;

procedure TSmart.HoldMouse(X, Y: Integer; Left: Boolean);
begin
  SmartHoldMouse(Self.Target, X, Y, Left);
end;

procedure TSmart.ReleaseMouse(X, Y: Integer; Left: Boolean);
begin
  SmartReleaseMouse(Self.Target, X, Y, Left);
end;

procedure TSmart.HoldMousePlus(X, Y, Button: Integer);
begin
  SmartHoldMouse(Self.Target, X, Y, Button);
end;

procedure TSmart.ReleaseMousePlus(X, Y, Button: Integer);
begin
  SmartReleaseMousePlus(Self.Target, X, Y, Button);
end;

procedure TSmart.MoveMouse(X, Y: Integer);
begin
  SmartMoveMouse(Self.Target, X, Y);
end;

procedure TSmart.WindMouse(X, Y);
begin
  SmartWindMouse(Self.Target, X, Y);
end;

procedure TSmart.ClickMouse(X, Y: Integer; Left: Boolean);
begin
  SmartClickMouse(Self.Target, X, Y, Left);
end;

procedure TSmart.ClickMousePlus(Self.Target, X, Y, Button: Integer);
begin
  SmartClickMousePlus(Self.Target, X, Y, Button);
end;

procedure TSmart.IsMouseButtonHeld(Button: Integer);
begin
  SmartIsMouseButtonHeld(Self.Target, Button);
end;

procedure TSmart.ScrollMouse(X, Y);
begin
  SmartScrollMouse(Self.Target, X, Y, 3);
end;

procedure TSmart.SendKeys(Text: String; KeyWait, KeyMod: Integer);
begin
  SmartSendKeys(Self.Target, Text, KeyWait, KeyMod);
end;

procedure TSmart.HoldKey(Code: Integer);
begin
  SmartHoldKey(Self.Target, Code);
end;

procedure TSmart.ReleaseKey(Code: Integer);
begin
  SmartReleaseKey(Self.Target, Code);
end;

function TSmart.IsKeyDown(Code: Integer): Boolean;
begin
  Result := SmartIsKeyDown(Self.Target, Code);
end;

procedure TSmart.SetCapture(Enabled; Boolean);
begin
  SmartSetCapture(Self.Target, Enabled);
end;

procedure TSmart.SetNativeButton(PluginID, ButtonID: Integer; State: Boolean);
begin
  SmartSetNativeButton(Self.Target, PluginID, ButtonID, State);
end;
{$ENDIF}

{$IFDEF SmartReflectionWrappers}
function TSmart.GetFieldArraySize(Reference: Integer; Path: String; Dimension: Integer): Integer;
begin
  Result := SmartGetFieldArraySize(Self.Target, Reference, Path, Dimension);
end;

procedure TSmart.FreeObject(Reference: Integer);
begin
  SmartFreeObject(Self.Target, Reference);
end;

function TSmart.GetFieldObject(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldObject(Self.Target, Reference, Path);
end;

function TSmart.GetFieldBoolean(Reference: Integer; Path: String): Boolean;
begin
  Result := SmartGetFieldBoolean(Self.Target, Reference, Path);
end;

function TSmart.GetFieldLongH(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldLongH(Self.Target, Reference, Path);
end;

function TSmart.GetFieldLongL(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldLongL(Self.Target, Reference, Path);
end;

function TSmart.GetFieldInt(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldInt(Self.Target, Reference, Path);
end;

function TSmart.GetFieldShort(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldShort(Self.Target, Reference, Path);
end;

function TSmart.GetFieldFloat(Reference: Integer; Path: String): Extended;
begin
  Result := SmartGetFieldFloat(Self.Target, Reference, Path);
end;

function TSmart.GetFieldDouble(Reference: Integer; Path: String): Extended;
begin
  Result := SmartGetFieldObject(Self.Target, Reference, Path);
end;

function TSmart.GetFieldByte(Reference: Integer; Path: String): Integer;
begin
  Result := SmartGetFieldByte(Self.Target, Reference, Path);
end;

function TSmart.GetFieldArray2DObject(Reference: Integer; Path: String; X, Y: Integer): Integer;
begin
  Result := SmartGetFieldArray2DObject(Self.Target, Reference, Path, X, Y);
end;

function TSmart.GetFieldArray2DInt(Reference: Integer; Path: String; X, Y: Integer): Integer;
begin
  Result := SmartGetFieldArray2DInt(Self.Target, Reference, Path, X, Y);
end;

function TSmart.GetFieldArray2DDouble(Reference: Integer; Path: String; X, Y: Integer): Extended;
begin
  Result := SmartGetFieldArray2DDouble(Self.Target, Reference, Path, X, Y);
end;

function TSmart.GetFieldArray2DFloat(Reference: Integer; Path: String; X, Y: Integer): Extended;
begin
  Result := SmartGetFieldArray2DFloat(Self.Target, Reference, Path, X, Y);
end;

function TSmart.GetFieldArray2DBoolean(Reference: Integer; Path: String; X, Y: Integer): Boolean;
begin
  Result := SmartGetFieldArray2DBoolean(Self.Target, Reference, Path, X, Y);
end;

begin
end;
